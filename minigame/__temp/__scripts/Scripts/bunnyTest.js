"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var engine_1 = require("engine");
var bunnyTest = (function (_super) {
    tslib_1.__extends(bunnyTest, _super);
    function bunnyTest() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.count = 0;
        _this.isAdding = false;
        _this.amount = 0;
        _this.bunnyType = 0;
        _this.gravity = 0;
        _this.minX = 0;
        _this.minY = 0;
        _this.maxX = 0;
        _this.maxY = 0;
        _this.addTouch = null;
        _this.resetTouch = null;
        _this.bunnys = [];
        _this.bunnyFrames = [];
        _this.bunnyRoot = null;
        _this.texture = null;
        _this.countLabel = null;
        _this.resetLabel = null;
        return _this;
    }
    bunnyTest.prototype.onAwake = function () {
        this.countLabel.text = this.count + "";
        this.bunnyRoot = this.entity.transform2D.findChildByName("bunnyRoot").entity;
        this.addTouch = this.countLabel.entity.getComponent(engine_1.default.TouchInputComponent);
        this.resetTouch = this.resetLabel.entity.getComponent(engine_1.default.TouchInputComponent);
        this.reset();
        this.addTouch.onTouchStart.add(function (comp, event) {
            console.log(comp, "TOUCH_START", event);
            this.isAdding = true;
        }.bind(this));
        this.addTouch.onTouchEnd.add(function (comp, event) {
            console.log(comp, "TOUCH_END", event);
            this.bunnyType++;
            this.bunnyType %= 5;
            this.isAdding = false;
        }.bind(this));
        this.addTouch.onTouchCancel.add(function (comp, event) {
            console.log(comp, "TOUCH_CANCEL", event);
            this.bunnyType++;
            this.bunnyType %= 5;
            this.isAdding = false;
        }.bind(this));
        this.resetTouch.onTouchEnd.add(function (comp, event) {
            this.reset();
        }.bind(this));
    };
    bunnyTest.prototype.reset = function () {
        this.bunnys = [];
        var childNum = this.bunnyRoot.transform2D.childrenCount;
        for (var i = 0; i < childNum; i++) {
            var child = this.bunnyRoot.transform2D.children.pop();
            this.bunnyRoot.transform2D.removeChild(child);
        }
        this.bunnyType = 0;
        this.gravity = 0.5;
        var winSize = this.entity.game.sceneRoot.transform2D.size;
        this.maxX = winSize.x / 2;
        this.maxY = winSize.y / 2;
        this.minX = -this.maxX;
        this.minY = -this.maxY;
        this.isAdding = false;
        this.count = 0;
        this.amount = 100;
        this.countLabel.text = this.count + "";
    };
    bunnyTest.prototype.onUpdate = function (dt) {
        if (this.isAdding) {
            for (var i = 0; i < this.amount; i++) {
                var bunny = this.entity.game.createEntity2D('bunny');
                bunny.transform2D.size.x = 26;
                bunny.transform2D.size.y = 37;
                bunny["speedX"] = Math.random() * 10;
                bunny["speedY"] = (Math.random() * 10) - 5;
                bunny.transform2D.position.x = this.minX + 10;
                bunny.transform2D.position.y = this.maxY * 0.7;
                bunny.transform2D.anchorY = 1;
                var canvasSp = bunny.addComponent(engine_1.default.UISprite);
                this.bunnyRoot.transform2D.addChild(bunny.transform2D);
                var spriteFrame = this.texture.spriteFrame;
                canvasSp.spriteFrame = spriteFrame;
                this.bunnys.push(bunny);
                this.count++;
            }
            this.countLabel.text = this.count + "";
        }
        for (var i = 0; i < this.bunnys.length; i++) {
            var bunny = this.bunnys[i];
            var x = bunny.transform2D.position.x + bunny["speedX"];
            var y = bunny.transform2D.position.y - bunny["speedY"];
            bunny["speedY"] += this.gravity;
            if (x > this.maxX) {
                bunny["speedX"] *= -1;
                x = this.maxX;
            }
            else if (x < this.minX) {
                bunny["speedX"] *= -1;
                x = this.minX;
            }
            if (y < this.minY) {
                bunny["speedY"] *= -0.85;
                y = this.minY;
                if (Math.random() > 0.5) {
                    bunny["speedY"] -= Math.random() * 6;
                }
            }
            else if (y > this.maxY) {
                bunny["speedY"] = 0;
                y = this.maxY;
            }
            bunny.transform2D.position.x = x;
            bunny.transform2D.position.y = y;
        }
    };
    tslib_1.__decorate([
        engine_1.default.decorators.property({
            type: 'UISprite'
        })
    ], bunnyTest.prototype, "texture", void 0);
    tslib_1.__decorate([
        engine_1.default.decorators.property({
            type: 'UILabel'
        })
    ], bunnyTest.prototype, "countLabel", void 0);
    tslib_1.__decorate([
        engine_1.default.decorators.property({
            type: 'UILabel'
        })
    ], bunnyTest.prototype, "resetLabel", void 0);
    bunnyTest = tslib_1.__decorate([
        engine_1.default.decorators.serialize("bunnyTest")
    ], bunnyTest);
    return bunnyTest;
}(engine_1.default.Script));
exports.default = bunnyTest;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
